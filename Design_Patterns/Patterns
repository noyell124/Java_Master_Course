package testPackage;

import java.util.Scanner;

/**
 * This code was written by Noy Ella-Barak as an exploration of patterns using basic Java concepts.
 * The goal was to generate patterns consisting of '*' and numbers using only 'for' and 'while' loops, 
 * along with 'if-else' conditions. The patterns are based on examples provided in an accompanying PDF, 
 * with a few assumptions made where necessary.
 *
 * Feel free to reach out with suggestions or improvements. :)
 */


public class patterns {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);

		while (true) {
			System.out.println("Welcome! Please enter the pattern number:");
			int pattern_num = scn.nextInt();
			if (pattern_num == 0) {
				System.out.println("Exiting... Bye!");
				break;
			}
			System.out.println("Please enter the number N:");
			int rows_num = scn.nextInt();

			if (pattern_num == 1) {
				// do pattern one
				int cols_num = rows_num;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= cols_num; col++) {
						System.out.print("*");
					}
					System.out.println();
				}
			} else if (pattern_num == 2) {
				// do pattern #2
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= row; col++) {
						System.out.print("*");
					}
					System.out.println();
				}
			} else if (pattern_num == 3) {
				// do pattern #3
				for (int row = 1; row <= rows_num; row++) {
					for (int col = rows_num + 1 - row; col > 0; col--) {
						System.out.print("*");
					}
					System.out.println();
				}
			} else if (pattern_num == 4) {
				// do pattern #4
				int i = 1;
				int j = 1;
				while (i <= rows_num) {
					while (j <= rows_num) {
						if (j > (rows_num - i)) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
						j++;
					}
					j = 1;
					System.out.println();
					i++;
				}
			} else if (pattern_num == 5) {
				// do pattern #5
				int i = 1;
				int j = 1;
				while (i <= rows_num) {
					while (j <= rows_num) {
						if (j < i) {
							System.out.print(" ");
						} else {
							System.out.print("*");
						}
						j++;
					}
					j = 1;
					System.out.println();
					i++;
				}
			} else if (pattern_num == 6) {
				// do pattern #6
				int i = 1;
				int j = 1;
				while (i <= rows_num) {
					while (j <= rows_num) {
						if (j < i) {
							System.out.print("   ");
						} else {
							System.out.print("*");
						}
						j++;
					}
					j = 1;
					System.out.println();
					i++;
				}
			} else if (pattern_num == 7) {
				// do pattern #7
				for (int col = 0; col < rows_num; col++) {
					for (int row = 0; row < rows_num; row++) {
						if (col == 0 || col == rows_num - 1 || row == 0 || row == rows_num - 1) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 8) {
				// do pattern #8
				for (int col = 0; col < rows_num; col++) {
					for (int row = 0; row < rows_num; row++) {
						if (row == col) {
							System.out.print("*");
						} else if (row > col && col == (rows_num - 1 - row)
								|| row < col && row == (rows_num - 1 - col)) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 9) {
				// do pattern #9 looks like #4 but with changes
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num * 2 - 1; col++) {
						if (col >= rows_num + 1 - row && col <= rows_num - 1 + row) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 10) {
				// do pattern #10
				int col = 1;
				int row = 1;
				while (col <= rows_num) {
					while (row <= rows_num * 2 - 1) {
						if (row >= col && row <= 2 * rows_num - col) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
						row++;
					}
					row = 1;
					System.out.println();
					col++;
				}

			} else if (pattern_num == 11) {
				// do pattern #11
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num * 2 - 1; col++) {
						if (col <= rows_num - 1 + row && col >= rows_num + 1 - row) { // the basic pyramid
							if (row % 2 == col % 2) {
								System.out.print("*");
							} else {
								System.out.print(" ");
							}
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 12) {
				// do pattern #12 - same as #11 but here the spaces inside the pyramid will
				// become !
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num * 2 - 1; col++) {
						if (col <= rows_num - 1 + row && col >= rows_num + 1 - row) { // the basic pyramid
							if (row % 2 == col % 2) {
								System.out.print("*");
							} else {
								System.out.print("!");
							}
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 13) {
				// do pattern #13 - now the pyramid will be on the side meaning row and col
				// switch!
				for (int row = 1; row <= rows_num * 2 - 1; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if ((col <= row && row <= rows_num) || (col <= rows_num * 2 - row && row >= rows_num)) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 14) {
				// do pattern #14 - same as 13 but on the other side
				for (int row = 1; row <= rows_num * 2 - 1; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if (row <= rows_num - 1 + col && row >= rows_num + 1 - col) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 15) {
				// do pattern #15
				int stars_num = rows_num;
				int spaces_num = 0;
				int line = 0;
				while (line < rows_num * 2 - 1) {
					if (spaces_num > 0) {
						System.out.print("  ");
						spaces_num--;
					} else if (stars_num > 0) {
						System.out.print("*");
						stars_num--;
					}
					if (stars_num == 0) {
						System.out.println();
						line++;
						if (line < rows_num) {
							stars_num = rows_num - line;
							spaces_num = 0 + line;
						} else {
							stars_num = line - rows_num + 2;
							spaces_num = rows_num - stars_num;
						}
					}
				}
			} else if (pattern_num == 16) {
				// do pattern #16
				int stars_num = rows_num;
				int spaces_num = rows_num - 1;
				int line = 0;
				while (line < rows_num * 2 - 1) {
					if (spaces_num > 0) {
						System.out.print(" ");
						spaces_num--;
					} else if (stars_num > 0) {
						System.out.print("*");
						stars_num--;
					}
					if (stars_num == 0) {
						System.out.println();
						line++;
						if (line < rows_num) {
							stars_num = rows_num - line;
							spaces_num = rows_num - line - 1;
						} else {
							stars_num = line - rows_num + 2;
							spaces_num = line - rows_num + 1;
						}
					}
				}
			} else if (pattern_num == 17) {
				// do pattern #17
				int mid = (rows_num / 2) + 1;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if (row < mid) { // top pyramid
							if (col <= (mid + row - 1) && col >= (mid - row + 1)) {
								System.out.print(" ");
							} else {
								System.out.print("*");
							}
						} else if (row > mid) { // bottom pyramid
							if (col <= (mid + rows_num - row) && col >= (mid - rows_num + row)) {
								System.out.print(" ");
							} else {
								System.out.print("*");
							}
						} else { // middle
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 18) {
				// do pattern #18 - the opposite of # 17
				int mid = (rows_num / 2) + 1;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if (row < mid) { // top pyramid
							if (col <= (mid + row - 1) && col >= (mid - row + 1)) {
								System.out.print("*");
							} else {
								System.out.print(" ");
							}
						} else if (row > mid) { // bottom pyramid
							if (col <= (mid + rows_num - row) && col >= (mid - rows_num + row)) {
								System.out.print("*");
							} else {
								System.out.print(" ");
							}
						} else { // middle
							System.out.print("*");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 19) {
				// do pattern #19
				int mid = (rows_num / 2) + 1;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if (row <= mid) { // top pyramid
							if (col <= (mid + row - 2) && col >= (mid - row + 2)) {
								System.out.print(" ");
							} else {
								System.out.print("*");
							}
						} else if (row > mid) { // bottom pyramid
							if (col <= (mid + rows_num - row - 1) && col >= (mid - rows_num + row + 1)) {
								System.out.print(" ");
							} else {
								System.out.print("*");
							}
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 20) {
				// do pattern #20
				int mid = (rows_num / 2) + 1;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if (row <= mid) { // top pyramid
							if (col == (mid + row - 1) || col == (mid - row + 1)) {
								System.out.print("*");
							} else {
								System.out.print(" ");
							}
						} else if (row > mid) { // bottom pyramid
							if (col == (mid + rows_num - row) || col == (mid - rows_num + row)) {
								System.out.print("*");
							} else {
								System.out.print(" ");
							}
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 21) {
				// do pattern #22
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col < rows_num * 2; col++) {
						if (col <= row || col >= rows_num * 2 - row) {
							System.out.print("*");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 22) {
				// do pattern #22
				int n = rows_num;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col < (n + row - 1) && col > (n - row + 1)) {
							System.out.print(" ");
						} else {
							System.out.print("*");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 23) {
				// do pattern #23
				int n = rows_num;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							System.out.print("1");
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 24) {
				// do pattern #24
				int n = rows_num;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							System.out.print(row);
						} else {
							System.out.print(" ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 25) {
				// do pattern #25
				int n = rows_num;
				int counter = 1;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							System.out.print(counter + " ");
							counter++;
						} else {
							System.out.print("  ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 26) {
				// do pattern #26
				int n = rows_num;
				int counter = 1;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							System.out.print(counter + " ");
							counter++;
						} else {
							System.out.print("  ");
						}
					}
					System.out.println();
					counter = 1;
				}
			} else if (pattern_num == 27) {
				// do pattern #27
				int n = rows_num;
				int counter = 1;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							System.out.print(counter + " ");
							if (col < n) {
								counter++;
							} else {
								counter--;
							}
						} else {
							System.out.print("  ");
						}
					}
					System.out.println();
					counter = 1;
				}
			} else if (pattern_num == 28) {
				// do pattern #28
				int n = rows_num;
				int counter = 1;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							System.out.print(counter + " ");
							if (col < n) {
								counter++;
							} else {
								counter--;
							}
						} else {
							System.out.print("  ");
						}
					}
					System.out.println();
					counter += 2;
				}
			} else if (pattern_num == 29) {
				// do pattern #28 looks like #24
				int n = rows_num;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col == (n + row - 1) || col == (n - row + 1)) {
							System.out.print(row + " ");
						} else if (col < (n + row - 1) && col > (n - row + 1)) {
							System.out.print("0 ");
						} else {
							System.out.print("  ");
						}
					}
					System.out.println();
				}
			} else if (pattern_num == 30) {
				// do pattern #30 full cube not pyramid
				int type = rows_num;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num; col++) {
						System.out.print(type + " ");
						type--;
					}
					System.out.println();
					type = rows_num;
				}
			} else if (pattern_num == 31) {
				// do pattern #31
				int type = rows_num;
				for (int row = 1; row <= rows_num; row++) {
					for (int col = 1; col <= rows_num; col++) {
						if (col == rows_num - row + 1) {
							System.out.print("* ");
						} else {
							System.out.print(type + " ");
						}
						type--;
					}
					System.out.println();
					type = rows_num;
				}
			} else if (pattern_num == 32) {
				// do pattern #32
				int type = 1;
				for (int row = 1; row <= rows_num * 2 - 1; row++) {
					for (int col = 1; col <= rows_num * 2 - 1; col++) {
						if ((row <= rows_num && col < row * 2) || (row > rows_num && col < (rows_num * 2 - row) * 2)) {
							if (col % 2 == 1) { // col is even
								System.out.print(type + " ");
							} else { // col is odd
								System.out.print("* ");
							}
						} else {
							System.out.print(" ");
						}
					}
					if (row < rows_num) {
						type++;
					} else {
						type--;
					}
					System.out.println();
				}
			} else if (pattern_num == 33) {
				// do pattern #33
				int n = rows_num;
				int counter = n - 1;
				for (int row = 1; row <= n; row++) {
					for (int col = 1; col < n * 2; col++) {
						if (col > n) {
							counter = 2 * n - col;
						} else {
							counter = col;
						}
						if (col <= (n + row - 1) && col >= (n - row + 1)) {
							if (col == n) {
								System.out.print("0 ");
							} else {
								System.out.print(counter + " ");
							}
						} else {
							System.out.print("  ");
						}
					}
					System.out.println();
				}
			} else {
				System.out.println("The number is not valid. Sorry but bye!");
				break;
			}
			System.out.println(); // print '\n' after every pattern
		}
		scn.close();
	}
}
